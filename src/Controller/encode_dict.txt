All info should be encoded into a single byte (uint8_t) to avoid latency
Avoid sending 0

SERIAL
----- PC -> MCU -----
    1: begin program
    2: request sensor feedback
    3: calibrate x position 
    4: reset entire program
    5: set motor pwr, followed by 1 byte

----- MCU -> PC -----
    1: board connected
    2: all boards connected and motor vars initialized
    3: sensor data available for read, followed by a 10 bytes struct
    4: x position calibration done
    5: restart done
    128+rcode: error with cart board
    64+rcode: error with axis board
    32+rcode: error with IMU


I2C
----- Slave -> Master -----
    1: successfully started
    2: position data ready, followed by 2 bytes of data
    3: speed data ready, followed by 2 bytes of data
    4: successful position calibration
    5: successful restart

----- Master -> Slave -----
=> Also set as the "mode" value in peripheral boards 
   *0: not sent by the primary board. Set to this value when waiting for prompt
    1: sync prompt. board starts iff this is received
    2: request position data from encoders
    3: request speed data from encoders
    4: reset pos counter
    5: restart
    0x..: (IMU only) register address to read 

----- error (rcode from I2C r/w) -----
    0: success
    1: busy timeout upon entering endTransmission()
    2: START bit generation timeout
    3: end of address transmission timeout
    4: data byte transfer timeout
    5: data byte transfer succeeded, busy timeout immediately after
    6: timeout waiting for peripheral to clear stop bit
    7: incorrect WHO_AM_I address
    8: error during read opertation
    9: error during program execution, cannot reach target
position of flag->
    7: cart (MST)
    6: axis
    5: imu
